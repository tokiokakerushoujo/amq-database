{"version":3,"sources":["amqTable.js","filterForm.js","anime.js","games.js","home.js","App.js","serviceWorker.js","index.js"],"names":["CombinedTable","props","data","columns","useTable","initialState","pageSize","useSortBy","usePagination","getTableBodyProps","getTableProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","gotoPage","pageOptions","pageCount","nextPage","previousPage","setPageSize","state","pageIndex","Table","striped","bordered","hover","size","children","map","headerGroup","getHeaderGroupProps","headers","col","getHeaderProps","getSortByToggleProps","render","row","i","getRowProps","cells","cell","getCellProps","length","colSpan","Math","floor","className","type","onClick","document","getElementById","value","id","defaultValue","max","ceil","disabled","AnimeForm","useForm","register","handleSubmit","errors","Form","onSubmit","Object","keys","submit","Row","Col","Label","Control","name","ref","placeholder","label","as","Button","variant","buttonText","GameForm","useState","date","setDate","method","moment","format","selected","onChange","dateFormat","todayButton","minDate","Anime","setData","React","useMemo","Header","accessor","Cell","queryParams","qString","k","push","join","fetch","then","response","json","Game","console","log","Home","rows","setRows","count","setCount","Container","fluid","gameDate","gameBody","description","animeBody","list","body","JSON","stringify","x","xs","sm","order","offset","r","Group","key","md","App","focus","setFocus","Navbar","bg","Brand","href","Nav","Link","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.082b6df6.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useTable, usePagination, useSortBy } from 'react-table';\nimport Table from 'react-bootstrap/Table';\n\nexport default function CombinedTable(props) {\n  var data = props.data;\n  var columns = props.columns;\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize }\n  } = useTable({\n    columns,\n    data,\n    initialState: {pageSize: 15}\n  },\n  useSortBy, usePagination)\n\n  const paginate = () => {\n    if(data.length) {\n      return(<>\n        <td colSpan={Math.floor(columns.length / 2)} className=\"text-center\">\n          <button type=\"button\" onClick={() => gotoPage(document.getElementById('pageId').value)}>Go to page:</button> <input id=\"pageId\" type=\"text\" defaultValue={pageIndex + 1}/> of {Math.max(Math.ceil(data.length / pageSize) - 1, 1)}\n        </td>\n        <td colSpan={Math.ceil(columns.length / 2)} className=\"text-center\">\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}> {\"<<\"} </button>\n          <button onClick={previousPage} disabled={!canPreviousPage}> {\"<\"} </button>\n          <button onClick={nextPage} disabled={!canNextPage}> {\">\"} </button>\n          <button onClick={() => gotoPage(Math.ceil(data.length / pageSize) - 1)} disabled={!canNextPage}> {\">>\"} </button>\n        </td>\n      </>)\n    } else {\n      return null;\n    }\n  }\n\n  return <>\n    <Table striped bordered hover size=\"sm\">\n      <thead>\n        {props.children}\n      </thead>\n      <thead>\n        {\n          headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {\n                headerGroup.headers.map(col => (\n                  <th {...col.getHeaderProps(col.getSortByToggleProps())}>\n                    {col.render('Header')}\n                  </th>\n                ))\n              }\n            </tr>\n          ))\n        }\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {page.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n        <tr>{paginate()}</tr>\n      </tbody>\n    </Table>\n  </>\n}\n","import React, { useState } from 'react';\nimport {Button, Col, Form } from 'react-bootstrap';\nimport moment from 'moment';\nimport { useForm } from 'react-hook-form';\nimport DatePicker from 'react-datepicker';\n\nfunction AnimeForm(props) {\n  const { register, handleSubmit, errors} = useForm();\n  const onSubmit = (data) => {\n    let ret = {};\n    if (\"anime\" in data) {\n      if (!(data[\"anime\"])) {\n        delete data[\"anime\"]\n      }\n    }\n\n    if (\"owner\" in data) {\n      if (data[\"owner\"] === \"-1\") {\n        delete data[\"owner\"]\n      }\n    }\n\n    if (\"winner\" in data) {\n      if (data[\"winner\"] === \"-1\") {\n        delete data[\"winner\"]\n      }\n    }\n\n    if (\"game_id\" in data) {\n      if (!(data[\"game_id\"])) {\n        delete data[\"game_id\"]\n      }\n    }\n\n    if (Object.keys(data).length !== 0) {\n      props.submit(data);\n    } else {\n      props.submit();\n    }\n    // props.submit(data);\n  }\n  return(<>\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Form.Row>\n        <Col>\n          <Form.Label> Title </Form.Label>\n          <Form.Control name=\"anime\" ref={register} placeholder=\"Anime Title\" />\n        </Col>\n        <Col>\n          <Form.Label> Owner </Form.Label>\n          <Form.Control label=\"Owner\" name=\"owner\" ref={register} as=\"select\" placeholder=\"Owner\">\n            <option value=\"-1\"> Owner </option>\n            <option value=\"0\"> None </option>\n            <option value=\"1\"> Brian </option>\n            <option value=\"2\"> Toki </option>\n            <option value=\"3\"> Both </option>\n          </Form.Control>\n        </Col>\n        <Col>\n          <Form.Label> Winner </Form.Label>\n          <Form.Control label=\"Winner\" name=\"winner\" ref={register} as=\"select\" placeholder=\"Winner\">\n            <option value=\"-1\"> Winner </option>\n            <option value=\"0\"> None </option>\n            <option value=\"1\"> Brian </option>\n            <option value=\"2\"> Toki </option>\n            <option value=\"3\"> Both </option>\n          </Form.Control>\n        </Col>\n        <Col>\n          <Form.Label> Game ID </Form.Label>\n          <Form.Control name=\"game_id\" ref={register} placeholder=\"Game ID\" />\n        </Col>\n        <Button variant=\"secondary\" type=\"submit\"> {props.buttonText} </Button>\n      </Form.Row>\n    </Form>\n  </>)\n}\n\nfunction GameForm(props) {\n  const { register, handleSubmit, errors} = useForm();\n  const [date, setDate] = useState();\n\n  const onSubmit = (data) => {\n    if (Object.keys(data).length < 1) {\n      return false;\n    }\n    if (props.method === \"POST\") {\n      if (\"id\" in data) {\n        delete data[\"id\"];\n      }\n\n      if (\"date\" in data) {\n        delete data[\"date\"];\n      }\n\n      if (!(\"description\" in data)) {\n        return false;\n      }\n\n      data[\"date\"] = moment().format();\n      props.submit(data);\n    } else if (props.method === \"GET\") {\n      if (\"id\" in data && !data[\"id\"]) {\n        delete data[\"id\"];\n      }\n\n      if (\"description\" in data && !data[\"description\"]) {\n        delete data[\"description\"];\n      }\n\n      if (date) {\n        data[\"date\"] = date;\n      }\n\n      props.submit(data);\n    }\n\n\n  }\n  return (<>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Form.Row>\n          <Col>\n            <Form.Label> ID </Form.Label>\n            <Form.Control name=\"id\" ref={register} placeholder=\"ID\" />\n          </Col>\n          <Col>\n            <Form.Label> Description </Form.Label>\n            <Form.Control name=\"description\" ref={register} placeholder=\"description\" />\n          </Col>\n          <Col>\n            <Form.Label> Date </Form.Label><br />\n            <div className=\"form-control\">\n              <DatePicker\n                selected={date} onChange={date => setDate(date)}\n                dateFormat=\"yyyy-MM-dd\"\n                todayButton=\"Now\"\n                minDate={moment(\"2020-05-23\")}\n                />\n            </div>\n          </Col>\n        <Button variant=\"secondary\" type=\"submit\"> {props.buttonText} </Button>\n        </Form.Row>\n      </Form>\n  </>);\n}\n\nexport { AnimeForm, GameForm };\n","import React, { useEffect, useState, useMemo } from 'react';\nimport Table from './amqTable.js'\nimport {AnimeForm} from './filterForm.js';\nexport default function Anime(props) {\n  const [data, setData] = useState([]);\n  const animeUrl = 'https://amq-test-endpoint-b7kzj2xhiq-an.a.run.app/anime';\n\n  function getAnime(queryParams) {\n    let qString = [];\n    if (queryParams) {\n      const keys = Object.keys(queryParams);\n      for (let k in keys) {\n        qString.push(`${keys[k]}=${queryParams[keys[k]]}`)\n      }\n      qString = qString.join(\"&\");\n    }\n    fetch(animeUrl + `?${qString}`)\n    .then(response => response.json())\n    .then(data => {\n      setData(data);\n    })\n  }\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Title',\n      accessor: 'anime'\n    },\n    {\n      Header: 'Owner',\n      accessor: 'owner',\n      Cell: (row) => {\n        switch (row.value) {\n          case 1:\n            return \"Brian\";\n          case 2: return \"Toki\";\n          case 3: return \"Both\";\n          default: return \"-\";\n        }\n      }\n    },\n    {\n      Header: 'Winner',\n      accessor: \"winner\",\n      Cell: (row) => {\n        switch (row.value) {\n          case 1: return <div className=\"brian\"> Brian </div>;\n          case 2: return <div className=\"toki\"> Toki </div>;\n          case 3: return <div className=\"both\"> Both </div>;\n          default: return \"-\";\n        }\n      },\n    },\n    {\n      Header: 'Game ID',\n      accessor: 'game_id'\n    }\n  ], []);\n\n  return (<>\n      <AnimeForm submit={getAnime} buttonText=\"Filter\"/>\n      <br />\n      <Table data={data} columns={columns}>\n        <tr>\n          <th colSpan={columns.length} className=\"text-center\"> Anime Details </th>\n        </tr>\n      </Table>\n    </>);\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport Table from './amqTable.js'\nimport {GameForm} from './filterForm.js';\nimport moment from 'moment';\nexport default function Game(props) {\n  const [data, setData] = useState([]);\n  const gameUrl = 'https://amq-test-endpoint-b7kzj2xhiq-an.a.run.app/game';\n\n  const getGame = (queryParams) => {\n    let qString = [];\n    if (queryParams) {\n      const keys = Object.keys(queryParams);\n      for (let k in keys) {\n        if (keys[k] !== \"date\") {\n          qString.push(`${keys[k]}=${queryParams[keys[k]]}`)\n        } else {\n          var date = moment(queryParams[keys[k]]).format(\"YYYY-MM-DD\")\n          qString.push(`${keys[k]}=${date}`)\n        }\n      }\n      qString = qString.join(\"&\");\n    }\n    console.log(qString);\n    fetch(`${gameUrl}?${qString}`)\n    .then(data => data.json())\n    .then(response => setData(response));\n  }\n\n  const columns = useMemo(() => [\n    {\n      Header: 'ID',\n      accessor: 'id'\n    },\n    {\n      Header: 'Description',\n      accessor: 'description'\n    },\n    {\n      Header: 'Date',\n      accessor: 'date',\n      Cell: (row) => {\n        return moment(row.value).format(\"ddd DD MMM YYYY\");\n      }\n    }\n  ], []);\n\n\n  return (<>\n      <GameForm submit={getGame} buttonText={\"Filter\"} method=\"GET\"/>\n      <br />\n      <Table data={data} columns={columns}>\n        <tr>\n          <th colSpan={columns.length} className=\"text-center\"> Game Details </th>\n        </tr>\n      </Table>\n    </>);\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport Table from './amqTable.js'\nimport moment from 'moment';\nimport { Button, Container, Row, Col, Form } from 'react-bootstrap'\nimport { useForm } from 'react-hook-form';\nimport DatePicker from 'react-datepicker';\n\nexport default function Home(props) {\n  const { register, handleSubmit, errors} = useForm();\n  const [date, setDate] = useState();\n  const [gameId, setGameId] = useState();\n  var [rows, setRows] = useState([]);\n  var [count, setCount] = useState(0);\n\n  const postData = (data) => {\n    const gameUrl = 'https://amq-test-endpoint-b7kzj2xhiq-an.a.run.app/game';\n    const animeUrl = 'https://amq-test-endpoint-b7kzj2xhiq-an.a.run.app/batch_anime';\n\n    var gameDate = moment(data[\"date\"]).format(\"YYYY-MM-DD\")\n    var gameBody = {\n      description: data[\"description\"],\n      date: gameDate\n    };\n\n    var animeBody = {\n      list: []\n    };\n    var list = animeBody[\"list\"];\n\n    for (var i = 0; i < count; i++) {\n      list[i] = {\n        \"anime\": data[\"anime\"][i],\n        \"winner\": data[\"winner\"][i],\n        \"owner\": data[\"owner\"][i]\n      }\n    }\n\n    fetch(gameUrl, { method: \"POST\", headers:{ \"Content-Type\": \"application/json\"}, body: JSON.stringify(gameBody)})\n    .then(response => response.json())\n    .then(data => {\n      for (var x in list) {\n        list[x][\"game_id\"] = data[0][\"id\"];\n      }\n      fetch(animeUrl, { method: \"POST\", headers: { \"Content-Type\": \"application/json\"}, body: JSON.stringify(animeBody)})    \n    })\n  }\n\n  const generateRow = () => {\n    var row = (\n      <>\n        <Form.Group key={`formGroup__${count}`}>\n          <Form.Row key={`formGroup_row__${count}`}>\n            {count + 1}\n            <Col md={{ size: 3, order: 2, offset: 1 }}>\n              <Form.Control placeholder={`title`} name={`anime[${count}]`} ref={register}/>\n            </Col>\n            <Col md={{ size: 1, order: 3 }}>\n              <Form.Control as=\"select\" placeholder={`winner`} name={`winner[${count}]`} ref={register}>\n              <option value=\"0\"> None </option>\n              <option value=\"1\"> Brian </option>\n              <option value=\"2\"> Toki </option>\n              <option value=\"3\"> Both </option>\n            </Form.Control>\n\n            </Col>\n            <Col md={{ size: 1, order: 3 }}>\n              <Form.Control as=\"select\" placeholder={`owner`} name={`owner[${count}]`} ref={register}>\n              <option value=\"1\"> Brian </option>\n              <option value=\"2\"> Toki </option>\n              <option value=\"3\"> Both </option>\n            </Form.Control>\n\n            </Col>\n          </Form.Row>\n        </Form.Group>\n      </>\n    );\n    setCount(count + 1);\n    setRows([...rows, row]);\n  }\n\n  return(<>\n\n    <Container fluid=\"sm\" className=\"p-3\">\n      <Form onSubmit={handleSubmit(postData)} className=\"pt-2\">\n        <Form.Row>\n          <Col xs=\"1\" className=\"font-weight-bold\">\n            New Game:\n          </Col>\n          <Col xs=\"8\">\n            <Form.Control name=\"description\" ref={register} placeholder=\"description\" />\n          </Col>\n          <Col xs=\"3\">\n            <div className=\"form-control\">\n              <DatePicker\n                selected={date} onChange={date => setDate(date)}\n                dateFormat=\"yyyy-MM-dd\"\n                todayButton=\"Today\"\n                minDate={moment(\"2020-05-23\")}\n                />\n            </div>\n          </Col>\n        </Form.Row>\n      {rows.length > 0 && (\n        <Form.Row className=\"text-center font-weight-bold\">\n        <Col sm={{ size: 3, order: 2, offset: 1 }}>\n          <Form.Label> Title </Form.Label>\n        </Col>\n        <Col sm={{ size: 1, order: 3 }}>\n          <Form.Label> Winner </Form.Label>\n        </Col>\n        <Col sm={{ size: 1, order: 3 }}>\n          <Form.Label> Owner </Form.Label>\n        </Col>\n        </Form.Row>\n      )}\n        {rows.map(r => r)}\n        <Row className=\"pt-2\">\n          <Col sm=\"1\">\n            <Button onClick={generateRow}> + </Button>\n          </Col>\n          <Col sm={{size: 1, order: 4, offset: 10}}>\n            <Button variant=\"secondary\" type=\"submit\"> Submit </Button>\n          </Col>\n        </Row>\n      </Form>\n\n    </Container>\n\n  </>)\n}\n","import React from 'react';\nimport Anime from './anime'\nimport Game from './games';\nimport Home from './home'\nimport {\n  Navbar, Nav\n} from 'react-bootstrap';\n\nimport './App.css';\n\nfunction App() {\n  var [focus, setFocus] = React.useState(\"\")\n  const currShowing = () => {\n    if (focus === \"anime\") {\n      return (<Anime />)\n    } else if (focus === \"games\") {\n      return (<Game />)\n    } else {\n      return (<Home />)\n    }\n  }\n  return (<>\n    <Navbar bg=\"light\" >\n      <Navbar.Brand href=\"/\" onClick={() => setFocus(\"\")}>Welcome to AMQ Hell</Navbar.Brand>\n      <Nav.Link href=\"#anime\" onClick={() => setFocus(\"anime\")}> Anime </Nav.Link>\n      <Nav.Link href=\"#games\" onClick={() => setFocus(\"games\")}> Games </Nav.Link>\n    </Navbar>\n    {currShowing()}\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}